require 'test_helper'

class EmailTest < ActiveSupport::TestCase
  context "An email" do
    setup do
      @email = DelayedMailhopper::Email.new
    end

    should "require a from address" do
      assert !@email.valid?
      @email.from_address = 'user@example.com'
      assert @email.valid?
    end

    context "generated by a mailer" do
      setup do
        @headers = {
          :from => 'from@example.com',
          :to => 'to@example.com',
          :cc => 'cc@example.com',
          :bcc => 'bcc@example.com',
          :reply_to => 'reply_to@example.com',
          :subject => 'Hiya!'
        }
        @content = 'Papaya'
        SampleMailer.hello(@headers, @content).deliver
      end

      should "match the intended headers and content" do
        email = DelayedMailhopper::Email.first
        assert_equal email.from_address, @headers[:from]
        assert_equal email.to_address, @headers[:to]
        assert_equal email.cc_address, @headers[:cc]
        assert_equal email.bcc_address, @headers[:bcc]
        assert_equal email.reply_to_address, @headers[:reply_to]
        assert_equal email.subject, @headers[:subject]

        # Email content will include headers as well as content
        assert email.content.include?(@content)

        assert email.sent_at.nil?
      end

      should "be queued as a delayed job" do
        assert_equal DelayedMailhopper::Email.count, 1
        assert_equal Delayed::Job.count, 1
      end

      should "be delivered via DelayedJob" do
        email = DelayedMailhopper::Email.first
        assert email.sent_at.nil?

        Delayed::Job.first.invoke_job

        email.reload
        assert !email.sent_at.nil?
      end

      should "be marked as sent once delivered" do
        email = DelayedMailhopper::Email.first
        assert email.sent_at.nil?
        email.send!
        assert !email.sent_at.nil?
      end
    end
  end
end
